
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3855 (git sha1 54294957, clang 7.0.1 -fPIC -Os)


-- Parsing `lc4_regfile.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: lc4_regfile.v
Parsing Verilog input from `lc4_regfile.v' to AST representation.
Generating RTLIL representation for module `\lc4_regfile'.
Generating RTLIL representation for module `\mux2to1'.
Generating RTLIL representation for module `\mux4to1'.
Generating RTLIL representation for module `\mux8to1'.
Successfully finished Verilog frontend.

-- Parsing `register.v' using frontend `verilog' --

2. Executing Verilog-2005 frontend: register.v
Parsing Verilog input from `register.v' to AST representation.
Generating RTLIL representation for module `\Nbit_reg'.
Successfully finished Verilog frontend.

-- Running command `check; hierarchy -check; flatten; check -assert' --

3. Executing CHECK pass (checking for obvious problems).
Checking module Nbit_reg...
Checking module mux8to1...
Checking module mux4to1...
Checking module mux2to1...
Checking module lc4_regfile...
Found and reported 0 problems.

4. Executing HIERARCHY pass (managing design hierarchy).
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0

4.1. Executing AST frontend in derive mode using pre-parsed AST for module `\Nbit_reg'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Generating RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.
Parameter 1 (\n) = 16
Parameter 2 (\r) = 0
Found cached RTLIL representation for module `$paramod\Nbit_reg\n=16\r=0'.

5. Executing FLATTEN pass (flatten design).
<suppressed ~16 debug messages>

6. Executing CHECK pass (checking for obvious problems).
Checking module $paramod\Nbit_reg\n=16\r=0...
Checking module Nbit_reg...
Checking module mux8to1...
Checking module mux4to1...
Checking module mux2to1...
Checking module lc4_regfile...
Found and reported 0 problems.

End of script. Logfile hash: 8767c10ddb, CPU: user 0.02s system 0.00s, MEM: 11.27 MB peak
Yosys 0.9+3855 (git sha1 54294957, clang 7.0.1 -fPIC -Os)
Time spent: 51% 2x check (0 sec), 25% 1x flatten (0 sec), ...
